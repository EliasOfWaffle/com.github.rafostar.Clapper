This reverts most of GStreamer meson changes during 1.20 development
cycle, so we can build latest stable version with the older meson
version in currently available used runtime.

This should be removed once we update the runtime.
---
diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index fc6b716ae2..1208c2e554 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -65,7 +65,6 @@ variables:
     -Drtsp_server=enabled
     -Dvaapi=enabled
     -Dsharp=disabled
-    -Dgpl=enabled
 
   MESON_GST_WERROR: >
     -Dgstreamer:werror=true
diff --git a/README.md b/README.md
index f55555a0c4..7dcfa8d417 100644
--- a/README.md
+++ b/README.md
@@ -127,30 +127,6 @@ the build files to find `libmfx`.
 The plugin will be automatically enabled if possible, but you can ensure it by
 passing `-Dbad=enabled -Dgst-plugins-bad:msdk=enabled` to `meson`.
 
-### Building plugins with (A)GPL-licensed dependencies
-
-Some plugins have GPL- or AGPL-licensed dependencies and will only be built
-if you have explicitly opted in to allow (A)GPL-licensed dependencies by
-passing `-Dgpl=enabled` to Meson.
-
-List of plugins with (A)GPL-licensed dependencies (non-exhaustive) in gst-plugins-bad:
- - dts (DTS audio decoder plugin)
- - faad (Free AAC audio decoder plugin)
- - iqa (Image quality assessment plugin based on dssim-c)
- - mpeg2enc (MPEG-2 video encoder plugin)
- - mplex (audio/video multiplexer plugin)
- - ofa (Open Fingerprint Architecture library plugin)
- - resindvd (Resin DVD playback plugin)
- - x265 (HEVC/H.265 video encoder plugin)
-
-List of plugins with (A)GPL-licensed dependencies (non-exhaustive) in gst-plugins-ugly:
- - a52dec (Dolby Digital (AC-3) audio decoder plugin)
- - cdio (CD audio source plugin based on libcdio)
- - dvdread (DVD video source plugin based on libdvdread)
- - mpeg2dec (MPEG-2 video decoder plugin based on libmpeg2)
- - sidplay (Commodore 64 audio decoder plugin based on libsidplay)
- - x264 (H.264 video encoder plugin based on libx264)
-
 ### Static build
 
 Since *1.18.0* when doing a static build using `--default-library=static`, a
diff --git a/ci/docker/windows/install_gst.ps1 b/ci/docker/windows/install_gst.ps1
index 7d961cddb6..6105f3623b 100644
--- a/ci/docker/windows/install_gst.ps1
+++ b/ci/docker/windows/install_gst.ps1
@@ -53,8 +53,7 @@ $env:MESON_ARGS = "-Dglib:installed_tests=false " +
     "-Dlibav=disabled " +
     "-Dvaapi=disabled " +
     "-Dgst-plugins-base:pango=enabled " +
-    "-Dgst-plugins-good:cairo=enabled " +
-    "-Dgpl=enabled "
+    "-Dgst-plugins-good:cairo=enabled "
 
 Write-Output "Building gst"
 cmd.exe /C "C:\BuildTools\Common7\Tools\VsDevCmd.bat -host_arch=amd64 -arch=amd64 && meson _build $env:MESON_ARGS && meson compile -C _build && ninja -C _build install"
@@ -69,4 +68,4 @@ git clean -fdxx
 if (!$?) {
   Write-Host "Failed to git clean"
   Exit 1
-}
+}
\ No newline at end of file
diff --git a/meson.build b/meson.build
index 45ff5e26c5..022da6619f 100644
--- a/meson.build
+++ b/meson.build
@@ -1,6 +1,6 @@
 project('gstreamer-full', 'c',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : ['buildtype=debugoptimized',
                      # Needed due to https://github.com/mesonbuild/meson/issues/1889,
                      # but this can cause problems in the future. Remove it
@@ -12,7 +12,6 @@ gst_version = '>= @0@'.format(meson.project_version())
 build_system = build_machine.system()
 cc = meson.get_compiler('c')
 
-fs = import('fs')
 gnome = import('gnome')
 pkgconfig = import('pkgconfig')
 python3 = import('python').find_installation()
@@ -224,24 +223,13 @@ if documented_projects != ''
 endif
 
 all_plugins_paths = []
-all_plugins_dirs = []
 foreach plugin: all_plugins
   all_plugins_paths += plugin.full_path()
-  all_plugins_dirs += fs.parent(plugin.full_path())
 endforeach
 # Work around meson bug: https://github.com/mesonbuild/meson/pull/6770
 pathsep = host_machine.system() == 'windows' ? ';' : ':'
 all_plugins_paths = pathsep.join(all_plugins_paths)
 
-devenv = environment()
-devenv.set('GST_PLUGIN_PATH', all_plugins_dirs)
-devenv.set('CURRENT_GST', meson.current_source_dir())
-devenv.set('GST_VERSION', meson.project_version())
-devenv.set('GST_ENV', 'gst-' + meson.project_version())
-devenv.set('GST_REGISTRY', meson.current_build_dir() / 'registry.dat')
-devenv.set('GST_PLUGIN_SYSTEM_PATH', '')
-meson.add_devenv(devenv)
-
 generate_plugins_paths = find_program('scripts/generate_plugins_path.py')
 configure_file(
   output : 'GstPluginsPath.json',
diff --git a/meson_options.txt b/meson_options.txt
index 3037d5307b..1fa3c6d63b 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -34,10 +34,6 @@ option('gst-full-device-providers', type : 'string', value : '',
 option('gst-full-dynamic-types', type : 'string', value : '',
   description : '''List of dynamic types to expose in gstreamer-full's ABI with the syntax plugin:dt1,dt2. By default '' will export all device provider of the enabled plugin.''')
 
-# License-related feature options
-option('gpl', type: 'feature', value: 'disabled',
-  description: 'Allow build of plugins that have (A)GPL-licensed dependencies')
-
 # Common options, automatically inherited by subprojects
 option('tests', type : 'feature', value : 'auto', description : 'Build tests')
 option('examples', type : 'feature', value : 'auto', description : 'Build examples')
diff --git a/subprojects/gst-devtools/meson.build b/subprojects/gst-devtools/meson.build
index e40b188063..4fe4c711af 100644
--- a/subprojects/gst-devtools/meson.build
+++ b/subprojects/gst-devtools/meson.build
@@ -1,6 +1,6 @@
 project('gst-devtools', 'c',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : [ 'warning_level=1',
                       'c_std=gnu99',
                       'buildtype=debugoptimized' ])
diff --git a/subprojects/gst-devtools/validate/tests/meson.build b/subprojects/gst-devtools/validate/tests/meson.build
index ebe43eb3b1..7704328e25 100644
--- a/subprojects/gst-devtools/validate/tests/meson.build
+++ b/subprojects/gst-devtools/validate/tests/meson.build
@@ -2,9 +2,9 @@ pluginsdirs = [  ]
 if gst_dep.type_name() == 'pkgconfig'
   pbase = dependency('gstreamer-plugins-base-' + apiversion)
 
-  pluginsdirs = [gst_dep.get_variable('pluginsdir'),
-                 pbase.get_variable('pluginsdir')]
-  gst_plugin_scanner_dir = gst_dep.get_variable('pluginscannerdir')
+  pluginsdirs = [gst_dep.get_pkgconfig_variable('pluginsdir'),
+                 pbase.get_pkgconfig_variable('pluginsdir')]
+  gst_plugin_scanner_dir = gst_dep.get_pkgconfig_variable('pluginscannerdir')
 else
   gst_plugin_scanner_dir = subproject('gstreamer').get_variable('gst_scanner_dir')
 endif
diff --git a/subprojects/gst-docs/meson.build b/subprojects/gst-docs/meson.build
index e8fcd6fcef..36dff42ece 100644
--- a/subprojects/gst-docs/meson.build
+++ b/subprojects/gst-docs/meson.build
@@ -1,6 +1,6 @@
 project('GStreamer manuals and tutorials', 'c',
   version: '1.20.0',
-  meson_version : '>= 0.59')
+  meson_version : '>= 0.56')
 
 hotdoc_p = find_program('hotdoc')
 if not hotdoc_p.found()
diff --git a/subprojects/gst-editing-services/docs/meson.build b/subprojects/gst-editing-services/docs/meson.build
index bfffd41144..a7847e5f9c 100644
--- a/subprojects/gst-editing-services/docs/meson.build
+++ b/subprojects/gst-editing-services/docs/meson.build
@@ -32,7 +32,7 @@ if gst_dep.type_name() == 'internal'
     gst_proj = subproject('gstreamer')
     plugins_cache_generator = gst_proj.get_variable('plugins_cache_generator')
 else
-    plugins_cache_generator = find_program(join_paths(gst_dep.get_variable('libexecdir'), 'gstreamer-' + apiversion, 'gst-plugins-doc-cache-generator'), required: false)
+    plugins_cache_generator = find_program(join_paths(gst_dep.get_pkgconfig_variable('libexecdir'), 'gstreamer-' + apiversion, 'gst-plugins-doc-cache-generator'), required: false)
 endif
 
 plugins_cache = join_paths(meson.current_source_dir(), 'gst_plugins_cache.json')
diff --git a/subprojects/gst-editing-services/meson.build b/subprojects/gst-editing-services/meson.build
index 8e62442228..63de246d90 100644
--- a/subprojects/gst-editing-services/meson.build
+++ b/subprojects/gst-editing-services/meson.build
@@ -1,6 +1,6 @@
 project('gst-editing-services', 'c',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : [ 'warning_level=1',
                       'buildtype=debugoptimized' ])
 
diff --git a/subprojects/gst-editing-services/tests/check/meson.build b/subprojects/gst-editing-services/tests/check/meson.build
index 34c1344785..e43d7ffdd0 100644
--- a/subprojects/gst-editing-services/tests/check/meson.build
+++ b/subprojects/gst-editing-services/tests/check/meson.build
@@ -39,10 +39,10 @@ if gst_dep.type_name() == 'pkgconfig'
   pbase = dependency('gstreamer-plugins-base-' + apiversion, required : false)
   pbad = dependency('gstreamer-plugins-bad-' + apiversion, required : false)
 
-  pluginsdirs = [gst_dep.get_variable('pluginsdir'),
-                 pbase.get_variable('pluginsdir'),
-                 pbad.get_variable('pluginsdir')]
- gst_plugin_scanner_dir = gst_dep.get_variable('pluginscannerdir')
+  pluginsdirs = [gst_dep.get_pkgconfig_variable('pluginsdir'),
+                 pbase.get_pkgconfig_variable('pluginsdir'),
+                 pbad.get_pkgconfig_variable('pluginsdir')]
+ gst_plugin_scanner_dir = gst_dep.get_pkgconfig_variable('pluginscannerdir')
 else
  gst_plugin_scanner_dir = subproject('gstreamer').get_variable('gst_scanner_dir')
 endif
diff --git a/subprojects/gst-editing-services/tools/meson.build b/subprojects/gst-editing-services/tools/meson.build
index 0e73cfaf8c..8b3760ddca 100644
--- a/subprojects/gst-editing-services/tools/meson.build
+++ b/subprojects/gst-editing-services/tools/meson.build
@@ -25,7 +25,7 @@ bashcomp_found = false
 if bashcomp_dep.found()
   bashcomp_found = true
   bashcomp_dir_override = bashcomp_dep.version().version_compare('>= 2.10') ? ['datadir', datadir] : ['prefix', prefix]
-  bash_completions_dir = bashcomp_dep.get_variable('completionsdir', pkgconfig_define:  bashcomp_dir_override)
+  bash_completions_dir = bashcomp_dep.get_pkgconfig_variable('completionsdir', define_variable: bashcomp_dir_override)
   if bash_completions_dir == ''
     msg = 'Found bash-completion but the .pc file did not set \'completionsdir\'.'
     if bashcomp_option.enabled()
@@ -36,7 +36,7 @@ if bashcomp_dep.found()
     bashcomp_found = false
   endif
 
-  bash_helpers_dir = bashcomp_dep.get_variable('helpersdir', pkgconfig_define:  bashcomp_dir_override)
+  bash_helpers_dir = bashcomp_dep.get_pkgconfig_variable('helpersdir', define_variable: bashcomp_dir_override)
   if bash_helpers_dir == ''
     msg = 'Found bash-completion, but the .pc file did not set \'helpersdir\'.'
     if bashcomp_option.enabled()
diff --git a/subprojects/gst-integration-testsuites/meson.build b/subprojects/gst-integration-testsuites/meson.build
index 5bd1b921d6..6b99c08680 100644
--- a/subprojects/gst-integration-testsuites/meson.build
+++ b/subprojects/gst-integration-testsuites/meson.build
@@ -1 +1 @@
-project('gst-integration-testsuites', [], version: '1.20.0', meson_version : '>= 0.59', license: 'LGPL')
+project('gst-integration-testsuites', [], version: '1.20.0', meson_version : '>= 0.56', license: 'LGPL')
diff --git a/subprojects/gst-libav/docs/meson.build b/subprojects/gst-libav/docs/meson.build
index 5f25f20837..eb2c125987 100644
--- a/subprojects/gst-libav/docs/meson.build
+++ b/subprojects/gst-libav/docs/meson.build
@@ -14,7 +14,7 @@ if gst_dep.type_name() == 'internal'
     gst_proj = subproject('gstreamer')
     plugins_cache_generator = gst_proj.get_variable('plugins_cache_generator')
 else
-    plugins_cache_generator = find_program(join_paths(gst_dep.get_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
+    plugins_cache_generator = find_program(join_paths(gst_dep.get_pkgconfig_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
     required: false)
 endif
 
diff --git a/subprojects/gst-libav/meson.build b/subprojects/gst-libav/meson.build
index b281b6377e..9e376f1790 100644
--- a/subprojects/gst-libav/meson.build
+++ b/subprojects/gst-libav/meson.build
@@ -1,6 +1,6 @@
 project('gst-libav', 'c', 'cpp',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : [ 'warning_level=1',
                       'buildtype=debugoptimized' ])
 
diff --git a/subprojects/gst-libav/tests/check/meson.build b/subprojects/gst-libav/tests/check/meson.build
index 2ba3714375..d2a70902d0 100644
--- a/subprojects/gst-libav/tests/check/meson.build
+++ b/subprojects/gst-libav/tests/check/meson.build
@@ -19,9 +19,9 @@ test_defines = [
 pluginsdirs = []
 if gst_dep.type_name() == 'pkgconfig'
   pbase = dependency('gstreamer-plugins-base-' + api_version, required: true)
-  pluginsdirs = [gst_dep.get_variable('pluginsdir'),
-                 pbase.get_variable('pluginsdir')]
-  gst_plugin_scanner_dir = gst_dep.get_variable('pluginscannerdir')
+  pluginsdirs = [gst_dep.get_pkgconfig_variable('pluginsdir'),
+                 pbase.get_pkgconfig_variable('pluginsdir')]
+  gst_plugin_scanner_dir = gst_dep.get_pkgconfig_variable('pluginscannerdir')
 else
   gst_plugin_scanner_dir = subproject('gstreamer').get_variable('gst_scanner_dir')
 endif
diff --git a/subprojects/gst-omx/docs/meson.build b/subprojects/gst-omx/docs/meson.build
index 811929d90d..908b4cfb75 100644
--- a/subprojects/gst-omx/docs/meson.build
+++ b/subprojects/gst-omx/docs/meson.build
@@ -15,7 +15,7 @@ if gst_dep.type_name() == 'internal'
     plugins_cache_generator = gst_proj.get_variable('plugins_cache_generator')
 else
     required_hotdoc_extensions += ['gst-extension']
-    plugins_cache_generator = find_program(join_paths(gst_dep.get_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
+    plugins_cache_generator = find_program(join_paths(gst_dep.get_pkgconfig_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
         required: false)
 endif
 
diff --git a/subprojects/gst-omx/meson.build b/subprojects/gst-omx/meson.build
index bd791060fc..bde29f3fbb 100644
--- a/subprojects/gst-omx/meson.build
+++ b/subprojects/gst-omx/meson.build
@@ -1,6 +1,6 @@
 project('gst-omx', 'c',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : [ 'warning_level=1',
                       'buildtype=debugoptimized' ])
 
@@ -188,8 +188,8 @@ elif omx_target == 'rpi'
 
   if gstgl_dep.found()
     if gstgl_dep.type_name() == 'pkgconfig'
-      gl_winsys = gstgl_dep.get_variable('gl_winsys').split(' ')
-      gl_platforms = gstgl_dep.get_variable('gl_platforms').split(' ')
+      gl_winsys = gstgl_dep.get_pkgconfig_variable('gl_winsys').split(' ')
+      gl_platforms = gstgl_dep.get_pkgconfig_variable('gl_platforms').split(' ')
     elif gstgl_dep.type_name() == 'internal'
       # XXX assume gst-plugins-base was built with dispmanx and egl support
       gl_winsys = ['dispmanx']
@@ -219,8 +219,8 @@ elif omx_target == 'tizonia'
   endif
   cdata.set('USE_OMX_TARGET_TIZONIA', 1)
   tizil_dep = dependency('tizilheaders', version : tizil_req)
-  cdata.set('TIZONIA_LIBDIR', tizil_dep.get_variable('libdir'))
-  tizil_includedir = tizil_dep.get_variable('includedir')
+  cdata.set('TIZONIA_LIBDIR', tizil_dep.get_pkgconfig_variable('libdir'))
+  tizil_includedir = tizil_dep.get_pkgconfig_variable('includedir')
   gst_omx_args += ['-I' + tizil_includedir + '/tizonia']
   omx_inc = []
 else
diff --git a/subprojects/gst-omx/tests/check/meson.build b/subprojects/gst-omx/tests/check/meson.build
index 4bb7de6976..c626cf5f6b 100644
--- a/subprojects/gst-omx/tests/check/meson.build
+++ b/subprojects/gst-omx/tests/check/meson.build
@@ -12,8 +12,8 @@ test_defines = [
 pluginsdirs = []
 if gst_dep.type_name() == 'pkgconfig'
   pbase = dependency('gstreamer-plugins-base-' + api_version, required : false)
-  pluginsdirs = [gst_dep.get_variable('pluginsdir'),
-                 pbase.get_variable('pluginsdir')]
+  pluginsdirs = [gst_dep.get_pkgconfig_variable('pluginsdir'),
+                 pbase.get_pkgconfig_variable('pluginsdir')]
 endif
 
 state_ignore_elements=''
diff --git a/subprojects/gst-plugins-bad/docs/meson.build b/subprojects/gst-plugins-bad/docs/meson.build
index e3f952c187..8ed754c516 100644
--- a/subprojects/gst-plugins-bad/docs/meson.build
+++ b/subprojects/gst-plugins-bad/docs/meson.build
@@ -31,7 +31,7 @@ if gst_dep.type_name() == 'internal'
     gst_proj = subproject('gstreamer')
     plugins_cache_generator = gst_proj.get_variable('plugins_cache_generator')
 else
-    plugins_cache_generator = find_program(join_paths(gst_dep.get_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
+    plugins_cache_generator = find_program(join_paths(gst_dep.get_pkgconfig_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
         required: false)
 endif
 
diff --git a/subprojects/gst-plugins-bad/ext/dts/meson.build b/subprojects/gst-plugins-bad/ext/dts/meson.build
index e4a5bcbfef..8ab3fc917f 100644
--- a/subprojects/gst-plugins-bad/ext/dts/meson.build
+++ b/subprojects/gst-plugins-bad/ext/dts/meson.build
@@ -1,10 +1,5 @@
-dts_opt = get_option('dts').require(gpl_allowed, error_message: '''
-  Plugin dts explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
-
 # Don't do any dependency checks if disabled
-if dts_opt.disabled()
+if get_option('dts').disabled()
   subdir_done()
 endif
 
@@ -14,7 +9,7 @@ if not dca_dep.found()
   if cc.has_header_symbol('dca.h', 'dca_init')
     dca_dep = cc.find_library('dca', required : false)
   endif
-  if not dca_dep.found() and dts_opt.enabled()
+  if not dca_dep.found() and get_option('dts').enabled()
     error('DTS plugin enabled, but libdca not found')
   endif
 endif
diff --git a/subprojects/gst-plugins-bad/ext/faad/meson.build b/subprojects/gst-plugins-bad/ext/faad/meson.build
index 2e633bd531..e3aefc9076 100644
--- a/subprojects/gst-plugins-bad/ext/faad/meson.build
+++ b/subprojects/gst-plugins-bad/ext/faad/meson.build
@@ -1,22 +1,12 @@
-faad_opt = get_option('faad').require(gpl_allowed, error_message: '''
-  Plugin faad explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
-
-if faad_opt.disabled()
-  faad_dep = dependency('', required: false)
-  subdir_done()
-endif
-
 faad_args = [ ]
 
 have_faad = cc.has_header_symbol('neaacdec.h', 'NeAACDecOpen')
 have_faad_2_7 = have_faad and cc.has_header_symbol('neaacdec.h', 'LATM')
-if have_faad and not have_faad_2_7 and faad_opt.enabled()
+if have_faad and not have_faad_2_7 and get_option('faad').enabled()
   message('Found faad2, but too old (< v2.7.0)')
 endif
 
-faad_dep = cc.find_library('faad', required : faad_opt)
+faad_dep = cc.find_library('faad', required : get_option('faad'))
 
 if faad_dep.found() and have_faad_2_7
   gstfaad = library('gstfaad',
diff --git a/subprojects/gst-plugins-bad/ext/iqa/iqa.c b/subprojects/gst-plugins-bad/ext/iqa/iqa.c
index 9362fd8459..afe83b9f76 100644
--- a/subprojects/gst-plugins-bad/ext/iqa/iqa.c
+++ b/subprojects/gst-plugins-bad/ext/iqa/iqa.c
@@ -516,7 +516,6 @@ plugin_init (GstPlugin * plugin)
   return GST_ELEMENT_REGISTER (iqa, plugin);
 }
 
-// FIXME: effective iqa plugin license should be AGPL3+ !
 GST_PLUGIN_DEFINE (GST_VERSION_MAJOR,
     GST_VERSION_MINOR,
     iqa,
diff --git a/subprojects/gst-plugins-bad/ext/iqa/meson.build b/subprojects/gst-plugins-bad/ext/iqa/meson.build
index 08d37a3509..75e07fc445 100644
--- a/subprojects/gst-plugins-bad/ext/iqa/meson.build
+++ b/subprojects/gst-plugins-bad/ext/iqa/meson.build
@@ -1,9 +1,4 @@
-iqa_opt = get_option('iqa').require(gpl_allowed, error_message: '''
-  Plugin iqa explicitly required via options but (A)GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow (A)GPL-licensed plugins to be built.
-  ''')
-
-dssim_dep = dependency('dssim', required: iqa_opt,
+dssim_dep = dependency('dssim', required : get_option('iqa'),
     fallback: ['dssim', 'dssim_dep'])
 
 if dssim_dep.found()
diff --git a/subprojects/gst-plugins-bad/ext/mpeg2enc/meson.build b/subprojects/gst-plugins-bad/ext/mpeg2enc/meson.build
index 325df936dc..af99bd564c 100644
--- a/subprojects/gst-plugins-bad/ext/mpeg2enc/meson.build
+++ b/subprojects/gst-plugins-bad/ext/mpeg2enc/meson.build
@@ -1,26 +1,21 @@
-mpeg2enc_opt = get_option('mpeg2enc').require(gpl_allowed, error_message: '''
-  Plugin mpeg2enc explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
-
 # mjpegtools upstream breaks API constantly and doesn't export the version in
 # a header anywhere. The configure file has a lot of logic to support old
 # versions, but it all seems untested and broken. Require 2.0.0. Can be changed
 # if someone complains.
-mjpegtools_dep = dependency('mjpegtools', version : '>=2.0.0', required : mpeg2enc_opt)
-mpeg2enc_dep = cxx.find_library('mpeg2encpp', required : mpeg2enc_opt)
+mjpegtools_dep = dependency('mjpegtools', version : '>=2.0.0', required : get_option('mpeg2enc'))
+mpeg2enc_dep = cxx.find_library('mpeg2encpp', required : get_option('mpeg2enc'))
 
-if mjpegtools_dep.found() and mpeg2enc_dep.found()
-  no_warn_args = []
-  foreach arg : [
-      '-Wno-mismatched-tags', # mjpeg headers get class/struct mixed up
-      '-Wno-header-guard',
-    ]
-    if cxx.has_argument(arg)
-      no_warn_args += [arg]
-    endif
-  endforeach
+no_warn_args = []
+foreach arg : [
+    '-Wno-mismatched-tags', # mjpeg headers get class/struct mixed up
+    '-Wno-header-guard',
+  ]
+  if cxx.has_argument(arg)
+    no_warn_args += [arg]
+  endif
+endforeach
 
+if mjpegtools_dep.found() and mpeg2enc_dep.found()
   gstmpeg2enc = library('gstmpeg2enc',
     'gstmpeg2enc.cc',
     'gstmpeg2encoptions.cc',
diff --git a/subprojects/gst-plugins-bad/ext/mplex/meson.build b/subprojects/gst-plugins-bad/ext/mplex/meson.build
index 38a017e12f..a1ac6ac57d 100644
--- a/subprojects/gst-plugins-bad/ext/mplex/meson.build
+++ b/subprojects/gst-plugins-bad/ext/mplex/meson.build
@@ -1,11 +1,6 @@
-mplex_opt = get_option('mplex').require(gpl_allowed, error_message: '''
-  Plugin mplex explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
-
-# See: ext/mplex for note about mjpegtools dep
-mjpegtools_dep = dependency('mjpegtools', version : '>=2.0.0', required : mplex_opt)
-mplex2_dep = cxx.find_library('mplex2', required : mplex_opt)
+# See: ext/mpeg2enc for note about mjpegtools dep
+mjpegtools_dep = dependency('mjpegtools', version : '>=2.0.0', required : get_option('mplex'))
+mplex2_dep = cxx.find_library('mplex2', required : get_option('mplex'))
 
 if mjpegtools_dep.found() and mplex2_dep.found()
   gstmplex2 = library('gstmplex',
diff --git a/subprojects/gst-plugins-bad/ext/onnx/meson.build b/subprojects/gst-plugins-bad/ext/onnx/meson.build
index 623d2ea592..9063642248 100644
--- a/subprojects/gst-plugins-bad/ext/onnx/meson.build
+++ b/subprojects/gst-plugins-bad/ext/onnx/meson.build
@@ -6,7 +6,7 @@ endif
 onnxrt_dep = dependency('libonnxruntime',required : get_option('onnx'))
 
 if onnxrt_dep.found()
-	onnxrt_include_root = onnxrt_dep.get_variable('includedir')
+	onnxrt_include_root = onnxrt_dep.get_pkgconfig_variable('includedir')
 	onnxrt_includes = [onnxrt_include_root / 'core/session', onnxrt_include_root / 'core']
 	onnxrt_dep_args = []
 	
diff --git a/subprojects/gst-plugins-bad/ext/opencv/meson.build b/subprojects/gst-plugins-bad/ext/opencv/meson.build
index 1d86b9092d..682d9ff85e 100644
--- a/subprojects/gst-plugins-bad/ext/opencv/meson.build
+++ b/subprojects/gst-plugins-bad/ext/opencv/meson.build
@@ -84,7 +84,7 @@ if not opencv_found
 endif
 
 if opencv_found
-  opencv_prefix = opencv_dep.get_variable('prefix')
+  opencv_prefix = opencv_dep.get_pkgconfig_variable('prefix')
   gstopencv_cargs += ['-DOPENCV_PREFIX="' + opencv_prefix + '"']
 
   # Check the data dir used by opencv for its xml data files
diff --git a/subprojects/gst-plugins-bad/ext/resindvd/meson.build b/subprojects/gst-plugins-bad/ext/resindvd/meson.build
index b7c901b505..06c216a33b 100644
--- a/subprojects/gst-plugins-bad/ext/resindvd/meson.build
+++ b/subprojects/gst-plugins-bad/ext/resindvd/meson.build
@@ -1,8 +1,3 @@
-resindvd_opt = get_option('resindvd').require(gpl_allowed, error_message: '''
-  Plugin resindvd explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
-
 resindvd_sources = [
   'gstmpegdemux.c',
   'gstmpegdesc.c',
@@ -15,8 +10,8 @@ resindvd_sources = [
   'rsnparsetter.c',
 ]
 
-dvdnav_dep = dependency('dvdnav', version : '>= 4.1.2', required : resindvd_opt)
-dvdread_dep = dependency('dvdread', version : '>= 4.1.2', required : resindvd_opt)
+dvdnav_dep = dependency('dvdnav', version : '>= 4.1.2', required : get_option('resindvd'))
+dvdread_dep = dependency('dvdread', version : '>= 4.1.2', required : get_option('resindvd'))
 
 if dvdnav_dep.found() and dvdread_dep.found()
   gstresindvd = library('gstresindvd',
diff --git a/subprojects/gst-plugins-bad/ext/wayland/meson.build b/subprojects/gst-plugins-bad/ext/wayland/meson.build
index a3ffb70d84..75800b287b 100644
--- a/subprojects/gst-plugins-bad/ext/wayland/meson.build
+++ b/subprojects/gst-plugins-bad/ext/wayland/meson.build
@@ -11,7 +11,7 @@ wl_sources = [
 libdrm_dep = dependency('libdrm', version: '>= 2.4.55', required:get_option('wayland'))
 
 if use_wayland
-    protocols_datadir = wl_protocol_dep.get_variable('pkgdatadir')
+    protocols_datadir = wl_protocol_dep.get_pkgconfig_variable('pkgdatadir')
 
     protocol_defs = [
         ['/stable/viewporter/viewporter.xml', 'viewporter-protocol.c', 'viewporter-client-protocol.h'],
diff --git a/subprojects/gst-plugins-bad/ext/x265/meson.build b/subprojects/gst-plugins-bad/ext/x265/meson.build
index 9743803868..b664caebf8 100644
--- a/subprojects/gst-plugins-bad/ext/x265/meson.build
+++ b/subprojects/gst-plugins-bad/ext/x265/meson.build
@@ -1,9 +1,4 @@
-x265_opt = get_option('x265').require(gpl_allowed, error_message: '''
-  Plugin x265 explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
-
-x265_dep = dependency('x265', required: x265_opt)
+x265_dep = dependency('x265', required: get_option('x265'))
 if x265_dep.found()
   gstx265 = library('gstx265',
     'gstx265enc.c',
diff --git a/subprojects/gst-plugins-bad/meson.build b/subprojects/gst-plugins-bad/meson.build
index 37e1a1507c..92a3764edc 100644
--- a/subprojects/gst-plugins-bad/meson.build
+++ b/subprojects/gst-plugins-bad/meson.build
@@ -1,6 +1,6 @@
 project('gst-plugins-bad', 'c', 'cpp',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : [ 'warning_level=1',
                       'buildtype=debugoptimized' ])
 
@@ -321,9 +321,9 @@ gstglegl_dep = dependency('', required : false)
 
 if gstgl_dep.found()
   if gstgl_dep.type_name() == 'pkgconfig'
-    gst_gl_apis = gstgl_dep.get_variable('gl_apis').split()
-    gst_gl_winsys = gstgl_dep.get_variable('gl_winsys').split()
-    gst_gl_platforms = gstgl_dep.get_variable('gl_platforms').split()
+    gst_gl_apis = gstgl_dep.get_pkgconfig_variable('gl_apis').split()
+    gst_gl_winsys = gstgl_dep.get_pkgconfig_variable('gl_winsys').split()
+    gst_gl_platforms = gstgl_dep.get_pkgconfig_variable('gl_platforms').split()
   else
     gstbase = subproject('gst-plugins-base')
     gst_gl_apis = gstbase.get_variable('enabled_gl_apis')
@@ -492,8 +492,6 @@ pkgconfig.generate(
   description : 'Streaming media framework, bad plugins libraries',
 )
 
-gpl_allowed = get_option('gpl').allowed()
-
 subdir('gst-libs')
 subdir('gst')
 subdir('sys')
@@ -550,16 +548,17 @@ configure_file(output : 'config.h', configuration : cdata)
 
 subdir('docs')
 
-plugin_names = []
-foreach plugin: plugins
-  if plugin.name().startswith('gst')
-    plugin_names += [plugin.name().substring(3)]
-  else
-    plugin_names += [plugin.name()]
-  endif
-endforeach
-
-summary({
-    'Plugins': plugin_names,
-      '(A)GPL license allowed': gpl_allowed,
-}, list_sep: ', ')
+if meson.version().version_compare('>= 0.54')
+  plugin_names = []
+  foreach plugin: plugins
+    # FIXME: Use str.subtring() when we can depend on Meson 0.56
+    split = plugin.name().split('gst')
+    if split.length() == 2
+      plugin_names += [split[1]]
+    else
+      warning('Need substring API in meson >= 0.56 to properly parse plugin name: ' + plugin.name())
+      plugin_names += [plugin.name()]
+    endif
+  endforeach
+  summary({'Plugins':plugin_names}, list_sep: ', ')
+endif
diff --git a/subprojects/gst-plugins-bad/meson_options.txt b/subprojects/gst-plugins-bad/meson_options.txt
index 4686492244..44f9c23fb1 100644
--- a/subprojects/gst-plugins-bad/meson_options.txt
+++ b/subprojects/gst-plugins-bad/meson_options.txt
@@ -101,10 +101,10 @@ option('decklink', type : 'feature', value : 'auto', description : 'DeckLink aud
 option('directfb', type : 'feature', value : 'auto', description : 'DirectFB video sink plugin')
 option('directsound', type : 'feature', value : 'auto', description : 'Directsound audio source plugin')
 option('dtls', type : 'feature', value : 'auto', description : 'DTLS encoder and decoder plugin')
-option('dts', type : 'feature', value : 'auto', description : 'DTS audio decoder plugin (GPL - only built if gpl option is also enabled!)')
+option('dts', type : 'feature', value : 'auto', description : 'DTS audio decoder plugin')
 option('dvb', type : 'feature', value : 'auto', description : 'DVB video bin and source plugin')
 option('faac', type : 'feature', value : 'auto', description : 'Free AAC audio encoder plugin')
-option('faad', type : 'feature', value : 'auto', description : 'Free AAC audio decoder plugin (GPL - only built if gpl option is also enabled!)')
+option('faad', type : 'feature', value : 'auto', description : 'Free AAC audio decoder plugin')
 option('fbdev', type : 'feature', value : 'auto', description : 'Framebuffer video sink plugin')
 option('fdkaac', type : 'feature', value : 'auto', description : 'Fraunhofer AAC audio codec plugin')
 option('flite', type : 'feature', value : 'auto', description : 'Flite speech synthesizer source plugin')
@@ -114,7 +114,7 @@ option('gme', type : 'feature', value : 'auto', description : 'libgme gaming con
 option('gs', type : 'feature', value : 'auto', description : 'Google Cloud Storage source and sink plugin')
 option('gsm', type : 'feature', value : 'auto', description : 'GSM encoder/decoder plugin')
 option('ipcpipeline', type : 'feature', value : 'auto', description : 'Inter-process communication plugin')
-option('iqa', type : 'feature', value : 'auto', description : 'Image quality assessment plugin (AGPL - only built if gpl option is also enabled!)')
+option('iqa', type : 'feature', value : 'auto', description : 'Image quality assessment plugin')
 option('kate', type : 'feature', value : 'auto', description : 'Kate subtitle parser, tagger, and codec plugin')
 option('kms', type : 'feature', value : 'auto', description : 'KMS video sink plugin')
 option('ladspa', type : 'feature', value : 'auto', description : 'LADSPA plugin bridge')
@@ -125,8 +125,8 @@ option('lv2', type : 'feature', value : 'auto', description : 'LV2 audio plugin
 option('mediafoundation', type : 'feature', value : 'auto', description : 'Microsoft Media Foundation plugin')
 option('microdns', type : 'feature', value : 'auto', description : 'libmicrodns-based device provider')
 option('modplug', type : 'feature', value : 'auto', description : 'ModPlug audio decoder plugin')
-option('mpeg2enc', type : 'feature', value : 'auto', description : 'mpeg2enc video encoder plugin (GPL - only built if gpl option is also enabled!)')
-option('mplex', type : 'feature', value : 'auto', description : 'mplex audio/video multiplexer plugin (GPL - only built if gpl option is also enabled!)')
+option('mpeg2enc', type : 'feature', value : 'auto', description : 'mpeg2enc video encoder plugin')
+option('mplex', type : 'feature', value : 'auto', description : 'mplex audio/video multiplexer plugin')
 option('msdk', type : 'feature', value : 'auto', description : 'Intel Media SDK video encoder/decoder plugin')
 option('musepack', type : 'feature', value : 'auto', description : 'libmpcdec Musepack decoder plugin')
 option('neon', type : 'feature', value : 'auto', description : 'NEON HTTP source plugin')
@@ -140,7 +140,7 @@ option('openmpt', type : 'feature', value : 'auto', description : 'OpenMPT modul
 option('openni2', type : 'feature', value : 'auto', description : 'OpenNI2 library plugin')
 option('opensles', type : 'feature', value : 'auto', description : 'OpenSL ES audio source/sink plugin')
 option('opus', type : 'feature', value : 'auto', description : 'OPUS audio parser plugin')
-option('resindvd', type : 'feature', value : 'auto', description : 'Resin DVD playback plugin (GPL - only built if gpl option is also enabled!)')
+option('resindvd', type : 'feature', value : 'auto', description : 'Resin DVD playback plugin')
 option('rsvg', type : 'feature', value : 'auto', description : 'SVG overlayer and image decoder plugin')
 option('rtmp', type : 'feature', value : 'auto', description : 'RTMP video network source and sink plugin')
 option('sbc', type : 'feature', value : 'auto', description : 'SBC bluetooth audio codec plugin')
@@ -170,7 +170,7 @@ option('webrtcdsp', type : 'feature', value : 'auto', description : 'Plugin with
 option('wildmidi', type : 'feature', value : 'auto', description : 'WildMidi midi soft synth plugin')
 option('winks', type : 'feature', value : 'auto', description : 'Windows Kernel Streaming video source plugin')
 option('winscreencap', type : 'feature', value : 'auto', description : 'Windows Screen Capture video source plugin')
-option('x265', type : 'feature', value : 'auto', description : 'HEVC/H.265 video encoder plugin (GPL - only built if gpl option is also enabled!)')
+option('x265', type : 'feature', value : 'auto', description : 'HEVC/H.265 video encoder plugin')
 option('zbar', type : 'feature', value : 'auto', description : 'Barcode image scanner plugin using zbar library')
 option('zxing', type : 'feature', value : 'auto', description : 'Barcode image scanner plugin using zxing-cpp library')
 option('wpe', type : 'feature', value : 'auto', description : 'WPE Web browser plugin')
diff --git a/subprojects/gst-plugins-bad/sys/msdk/meson.build b/subprojects/gst-plugins-bad/sys/msdk/meson.build
index 24aabc7612..c59ec13443 100644
--- a/subprojects/gst-plugins-bad/sys/msdk/meson.build
+++ b/subprojects/gst-plugins-bad/sys/msdk/meson.build
@@ -46,7 +46,7 @@ if mfx_api != 'oneVPL'
   mfx_dep = dependency('libmfx', version: ['>= 1.0', '<= 1.99'], required: false)
 
   if mfx_dep.found()
-    mfx_incdir = mfx_dep.get_variable('includedir')
+    mfx_incdir = mfx_dep.get_pkgconfig_variable('includedir')
     mfx_inc = []
     use_msdk = true
   else
@@ -75,7 +75,7 @@ if not use_msdk and mfx_api != 'MSDK'
   mfx_dep = dependency('vpl', version: '>= 2.2', required: false)
 
   if mfx_dep.found()
-    mfx_incdir = mfx_dep.get_variable('includedir')
+    mfx_incdir = mfx_dep.get_pkgconfig_variable('includedir')
     mfx_inc = []
     use_onevpl = true
   endif
@@ -158,7 +158,7 @@ endif
 
 if msdk_deps_found
   if host_machine.system() != 'windows'
-    driverdir = libva_dep.get_variable('driverdir', default_value: '')
+    driverdir = libva_dep.get_variable(pkgconfig: 'driverdir', internal: 'driverdir', default_value: '')
     if driverdir == ''
       driverdir = join_paths(get_option('prefix'), get_option('libdir'), 'dri')
     endif
diff --git a/subprojects/gst-plugins-bad/sys/va/meson.build b/subprojects/gst-plugins-bad/sys/va/meson.build
index c830de327f..3b29cbd2d4 100644
--- a/subprojects/gst-plugins-bad/sys/va/meson.build
+++ b/subprojects/gst-plugins-bad/sys/va/meson.build
@@ -43,7 +43,7 @@ endif
 
 cdata.set10('HAVE_GUDEV', libgudev_dep.found())
 
-driverdir = libva_dep.get_variable('driverdir', default_value: '')
+driverdir = libva_dep.get_variable(pkgconfig: 'driverdir', internal: 'driverdir', default_value: '')
 if driverdir == ''
   driverdir = join_paths(get_option('prefix'), get_option('libdir'), 'dri')
 endif
diff --git a/subprojects/gst-plugins-bad/tests/check/meson.build b/subprojects/gst-plugins-bad/tests/check/meson.build
index 7b6aeb66eb..419930f673 100644
--- a/subprojects/gst-plugins-bad/tests/check/meson.build
+++ b/subprojects/gst-plugins-bad/tests/check/meson.build
@@ -168,9 +168,9 @@ pluginsdirs = [  ]
 if gst_dep.type_name() == 'pkgconfig'
   pbase = dependency('gstreamer-plugins-base-' + api_version)
 
-  pluginsdirs = [gst_dep.get_variable('pluginsdir'),
-                 pbase.get_variable('pluginsdir')]
-  gst_plugin_scanner_dir = gst_dep.get_variable('pluginscannerdir')
+  pluginsdirs = [gst_dep.get_pkgconfig_variable('pluginsdir'),
+                 pbase.get_pkgconfig_variable('pluginsdir')]
+  gst_plugin_scanner_dir = gst_dep.get_pkgconfig_variable('pluginscannerdir')
 else
   gst_plugin_scanner_dir = subproject('gstreamer').get_variable('gst_scanner_dir')
 endif
diff --git a/subprojects/gst-plugins-base/docs/meson.build b/subprojects/gst-plugins-base/docs/meson.build
index 328e5aaa4e..69f9438326 100644
--- a/subprojects/gst-plugins-base/docs/meson.build
+++ b/subprojects/gst-plugins-base/docs/meson.build
@@ -33,7 +33,7 @@ if gst_dep.type_name() == 'internal'
     gst_proj = subproject('gstreamer')
     plugins_cache_generator = gst_proj.get_variable('plugins_cache_generator')
 else
-    plugins_cache_generator = find_program(join_paths(gst_dep.get_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
+    plugins_cache_generator = find_program(join_paths(gst_dep.get_pkgconfig_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
         required: false)
 endif
 
diff --git a/subprojects/gst-plugins-base/ext/libvisual/meson.build b/subprojects/gst-plugins-base/ext/libvisual/meson.build
index aa5c1c6de1..fb921fdc4c 100644
--- a/subprojects/gst-plugins-base/ext/libvisual/meson.build
+++ b/subprojects/gst-plugins-base/ext/libvisual/meson.build
@@ -7,7 +7,7 @@ libvisual_dep = dependency('libvisual-0.4', version : '>= 0.4.0',
                            required : get_option('libvisual'))
 if libvisual_dep.found()
   core_conf.set_quoted('LIBVISUAL_PLUGINSBASEDIR',
-    libvisual_dep.get_variable('pluginsbasedir'))
+    libvisual_dep.get_pkgconfig_variable('pluginsbasedir'))
 
   gstlibvisual = library('gstlibvisual',
     libvisual_sources,
diff --git a/subprojects/gst-plugins-base/ext/vorbis/meson.build b/subprojects/gst-plugins-base/ext/vorbis/meson.build
index 23fdf373c9..2be9645356 100644
--- a/subprojects/gst-plugins-base/ext/vorbis/meson.build
+++ b/subprojects/gst-plugins-base/ext/vorbis/meson.build
@@ -19,7 +19,7 @@ vorbisidec_sources = [
 
 vorbis_dep = dependency('vorbis', version : '>= 1.3.1', allow_fallback: true, required : get_option('vorbis'))
 vorbisenc_dep = dependency('vorbisenc', version : '>= 1.3.1', allow_fallback: true, required : get_option('vorbis'))
-vorbisidec_dep = dependency('vorbisidec', allow_fallback: true, required : get_option('tremor'))
+vorbisidec_dep = dependency('vorbisidec', required : get_option('tremor'))
 
 if vorbis_dep.found()
   vorbis_deps = [vorbis_dep]
diff --git a/subprojects/gst-plugins-base/gst-libs/gst/gl/meson.build b/subprojects/gst-plugins-base/gst-libs/gst/gl/meson.build
index b88e18cf3a..5deb6a7bf0 100644
--- a/subprojects/gst-plugins-base/gst-libs/gst/gl/meson.build
+++ b/subprojects/gst-plugins-base/gst-libs/gst/gl/meson.build
@@ -600,7 +600,7 @@ if need_win_wayland != 'no'
 
     if wayland_client_dep.found() and wayland_cursor_dep.found() and wayland_egl_dep.found() and wayland_protocols_dep.found() and wayland_scanner.found()
       # Generate the XDG shell interface
-      wayland_protocols_basedir = wayland_protocols_dep.get_variable('pkgdatadir')
+      wayland_protocols_basedir = wayland_protocols_dep.get_pkgconfig_variable('pkgdatadir')
       xdg_shell_xml_spec = join_paths(wayland_protocols_basedir, 'stable', 'xdg-shell', 'xdg-shell.xml')
       xdg_shell_header = custom_target('xdg-shell-client-header',
         command: [ wayland_scanner, 'client-header', '@INPUT@', '@OUTPUT@' ],
diff --git a/subprojects/gst-plugins-base/gst-libs/gst/tag/meson.build b/subprojects/gst-plugins-base/gst-libs/gst/tag/meson.build
index 7a14fe7ece..e366a1e51a 100644
--- a/subprojects/gst-plugins-base/gst-libs/gst/tag/meson.build
+++ b/subprojects/gst-plugins-base/gst-libs/gst/tag/meson.build
@@ -54,8 +54,8 @@ gst_tag_args = [
 have_iso_codes = false
 iso_codes_dep = dependency('iso-codes', required: get_option('iso-codes'))
 if iso_codes_dep.found()
-  if iso_codes_dep.get_variable('domains').split(' ').contains('iso_639-2')
-    iso_codes_prefix = iso_codes_dep.get_variable('prefix')
+  if iso_codes_dep.get_pkgconfig_variable('domains').split(' ').contains('iso_639-2')
+    iso_codes_prefix = iso_codes_dep.get_pkgconfig_variable('prefix')
     if iso_codes_prefix != ''
       core_conf.set_quoted('ISO_CODES_PREFIX', iso_codes_prefix)
       core_conf.set_quoted('ISO_CODES_VERSION', iso_codes_dep.version())
diff --git a/subprojects/gst-plugins-base/meson.build b/subprojects/gst-plugins-base/meson.build
index 5ad1ab3add..e3dea9517f 100644
--- a/subprojects/gst-plugins-base/meson.build
+++ b/subprojects/gst-plugins-base/meson.build
@@ -1,6 +1,6 @@
 project('gst-plugins-base', 'c',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : [ 'warning_level=1',
                       'buildtype=debugoptimized' ])
 
@@ -329,11 +329,11 @@ core_conf.set('HAVE_GIO_UNIX_2_0', giounix_dep.found())
 
 if gio_dep.type_name() == 'pkgconfig'
     core_conf.set_quoted('GIO_MODULE_DIR',
-        gio_dep.get_variable('giomoduledir'))
+        gio_dep.get_pkgconfig_variable('giomoduledir'))
     core_conf.set_quoted('GIO_LIBDIR',
-        gio_dep.get_variable('libdir'))
+        gio_dep.get_pkgconfig_variable('libdir'))
     core_conf.set_quoted('GIO_PREFIX',
-        gio_dep.get_variable('prefix'))
+        gio_dep.get_pkgconfig_variable('prefix'))
 else
     core_conf.set_quoted('GIO_MODULE_DIR', join_paths(get_option('prefix'),
       get_option('libdir'), 'gio/modules'))
diff --git a/subprojects/gst-plugins-base/tests/meson.build b/subprojects/gst-plugins-base/tests/meson.build
index e10aa9a687..25bd3497fb 100644
--- a/subprojects/gst-plugins-base/tests/meson.build
+++ b/subprojects/gst-plugins-base/tests/meson.build
@@ -1,7 +1,7 @@
 pluginsdirs = []
 if gst_dep.type_name() == 'pkgconfig'
-  pluginsdirs = [gst_dep.get_variable('pluginsdir')]
-  gst_plugin_scanner_dir = gst_dep.get_variable('pluginscannerdir')
+  pluginsdirs = [gst_dep.get_pkgconfig_variable('pluginsdir')]
+  gst_plugin_scanner_dir = gst_dep.get_pkgconfig_variable('pluginscannerdir')
 else
   gst_plugin_scanner_dir = gst_proj.get_variable('gst_scanner_dir')
 endif
diff --git a/subprojects/gst-plugins-good/docs/meson.build b/subprojects/gst-plugins-good/docs/meson.build
index 83c3a273fc..86304ab788 100644
--- a/subprojects/gst-plugins-good/docs/meson.build
+++ b/subprojects/gst-plugins-good/docs/meson.build
@@ -14,7 +14,7 @@ if gst_dep.type_name() == 'internal'
     gst_proj = subproject('gstreamer')
     plugins_cache_generator = gst_proj.get_variable('plugins_cache_generator')
 else
-    plugins_cache_generator = find_program(join_paths(gst_dep.get_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
+    plugins_cache_generator = find_program(join_paths(gst_dep.get_pkgconfig_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
         required: false)
 endif
 
diff --git a/subprojects/gst-plugins-good/meson.build b/subprojects/gst-plugins-good/meson.build
index c1a5ef16ef..1dff6f56ee 100644
--- a/subprojects/gst-plugins-good/meson.build
+++ b/subprojects/gst-plugins-good/meson.build
@@ -1,6 +1,6 @@
 project('gst-plugins-good', 'c',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : [ 'warning_level=1',
                       'buildtype=debugoptimized' ])
 
@@ -299,9 +299,9 @@ have_gstgl = gstgl_dep.found()
 
 if have_gstgl
   if gstgl_dep.type_name() == 'pkgconfig'
-    gst_gl_apis = gstgl_dep.get_variable('gl_apis').split()
-    gst_gl_winsys = gstgl_dep.get_variable('gl_winsys').split()
-    gst_gl_platforms = gstgl_dep.get_variable('gl_platforms').split()
+    gst_gl_apis = gstgl_dep.get_pkgconfig_variable('gl_apis').split()
+    gst_gl_winsys = gstgl_dep.get_pkgconfig_variable('gl_winsys').split()
+    gst_gl_platforms = gstgl_dep.get_pkgconfig_variable('gl_platforms').split()
   else
     gstbase = subproject('gst-plugins-base')
     gst_gl_apis = gstbase.get_variable('enabled_gl_apis')
diff --git a/subprojects/gst-plugins-good/tests/check/meson.build b/subprojects/gst-plugins-good/tests/check/meson.build
index 1920768091..33f0a062c3 100644
--- a/subprojects/gst-plugins-good/tests/check/meson.build
+++ b/subprojects/gst-plugins-good/tests/check/meson.build
@@ -167,9 +167,9 @@ test_defines = [
 pluginsdirs = []
 if gst_dep.type_name() == 'pkgconfig'
   pbase = dependency('gstreamer-plugins-base-' + api_version, required: true)
-  pluginsdirs = [gst_dep.get_variable('pluginsdir'),
-                 pbase.get_variable('pluginsdir')]
-  gst_plugin_scanner_dir = gst_dep.get_variable('pluginscannerdir')
+  pluginsdirs = [gst_dep.get_pkgconfig_variable('pluginsdir'),
+                 pbase.get_pkgconfig_variable('pluginsdir')]
+  gst_plugin_scanner_dir = gst_dep.get_pkgconfig_variable('pluginscannerdir')
 else
   gst_plugin_scanner_dir = subproject('gstreamer').get_variable('gst_scanner_dir')
 endif
diff --git a/subprojects/gst-plugins-ugly/docs/meson.build b/subprojects/gst-plugins-ugly/docs/meson.build
index f71d07bb96..1c67d8c701 100644
--- a/subprojects/gst-plugins-ugly/docs/meson.build
+++ b/subprojects/gst-plugins-ugly/docs/meson.build
@@ -15,7 +15,7 @@ if gst_dep.type_name() == 'internal'
     gst_proj = subproject('gstreamer')
     plugins_cache_generator = gst_proj.get_variable('plugins_cache_generator')
 else
-    plugins_cache_generator = find_program(join_paths(gst_dep.get_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
+    plugins_cache_generator = find_program(join_paths(gst_dep.get_pkgconfig_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
         required: false)
 endif
 
diff --git a/subprojects/gst-plugins-ugly/ext/a52dec/meson.build b/subprojects/gst-plugins-ugly/ext/a52dec/meson.build
index 68908a7e7f..843bef0910 100644
--- a/subprojects/gst-plugins-ugly/ext/a52dec/meson.build
+++ b/subprojects/gst-plugins-ugly/ext/a52dec/meson.build
@@ -1,24 +1,22 @@
-a52dec_opt = get_option('a52dec').require(gpl_allowed, error_message: '''
-  Plugin a52dec explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
+if get_option('a52dec').disabled()
+  subdir_done()
+endif
 
 a52_dep = cc.find_library('a52', required : get_option('a52dec'))
-if a52_dep.found()
-  have_a52_h = cc.has_header_symbol('a52dec/a52.h', 'a52_init', prefix : '#include <stdint.h>')
+have_a52_h = cc.has_header_symbol('a52dec/a52.h', 'a52_init', prefix : '#include <stdint.h>')
+if not have_a52_h and get_option('a52dec').enabled()
+  error('a52dec plugin enabled but a52.h not found')
+endif
 
-  if have_a52_h
-    a52dec = library('gsta52dec',
-      'gsta52dec.c',
-      c_args : ugly_args,
-      include_directories : [configinc],
-      dependencies : [gstaudio_dep, orc_dep, a52_dep],
-      install : true,
-      install_dir : plugins_install_dir,
-    )
-    pkgconfig.generate(a52dec, install_dir : plugins_pkgconfig_install_dir)
-    plugins += [a52dec]
-  elif a52dec_opt.enabled()
-    error('a52dec plugin enabled but a52.h not found')  
-  endif
+if a52_dep.found() and have_a52_h
+  a52dec = library('gsta52dec',
+    'gsta52dec.c',
+    c_args : ugly_args,
+    include_directories : [configinc],
+    dependencies : [gstaudio_dep, orc_dep, a52_dep],
+    install : true,
+    install_dir : plugins_install_dir,
+  )
+  pkgconfig.generate(a52dec, install_dir : plugins_pkgconfig_install_dir)
+  plugins += [a52dec]
 endif
diff --git a/subprojects/gst-plugins-ugly/ext/cdio/meson.build b/subprojects/gst-plugins-ugly/ext/cdio/meson.build
index 4b21e36012..054d02627c 100644
--- a/subprojects/gst-plugins-ugly/ext/cdio/meson.build
+++ b/subprojects/gst-plugins-ugly/ext/cdio/meson.build
@@ -1,9 +1,4 @@
-cdio_opt = get_option('cdio').require(gpl_allowed, error_message: '''
-  Plugin cdio explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
-
-cdio_dep = dependency('libcdio', version : '>= 0.76', required : cdio_opt)
+cdio_dep = dependency('libcdio', version : '>= 0.76', required : get_option('cdio'))
 
 if cdio_dep.found()
   cdio = library('gstcdio',
diff --git a/subprojects/gst-plugins-ugly/ext/dvdread/meson.build b/subprojects/gst-plugins-ugly/ext/dvdread/meson.build
index a1cbfdcb38..f075d8462b 100644
--- a/subprojects/gst-plugins-ugly/ext/dvdread/meson.build
+++ b/subprojects/gst-plugins-ugly/ext/dvdread/meson.build
@@ -1,9 +1,4 @@
-dvdread_opt = get_option('dvdread').require(gpl_allowed, error_message: '''
-  Plugin dvdread explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
-
-dvdread_dep = dependency('dvdread', version : '>= 0.5.0', required : dvdread_opt)
+dvdread_dep = dependency('dvdread', version : '>= 0.5.0', required : get_option('dvdread'))
 
 if gmodule_dep.found() and dvdread_dep.found()
   dvdread = library('gstdvdread',
diff --git a/subprojects/gst-plugins-ugly/ext/mpeg2dec/meson.build b/subprojects/gst-plugins-ugly/ext/mpeg2dec/meson.build
index 77d3ba057b..aa5262ac59 100644
--- a/subprojects/gst-plugins-ugly/ext/mpeg2dec/meson.build
+++ b/subprojects/gst-plugins-ugly/ext/mpeg2dec/meson.build
@@ -1,9 +1,4 @@
-mpeg2dec_opt = get_option('mpeg2dec').require(gpl_allowed, error_message: '''
-  Plugin mpeg2dec explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
-
-mpeg2_dep = dependency('libmpeg2', version : '>= 0.4.0', required : mpeg2dec_opt)
+mpeg2_dep = dependency('libmpeg2', version : '>= 0.4.0', required : get_option('mpeg2dec'))
 
 if mpeg2_dep.found()
   mpeg2dec = library('gstmpeg2dec',
diff --git a/subprojects/gst-plugins-ugly/ext/sidplay/meson.build b/subprojects/gst-plugins-ugly/ext/sidplay/meson.build
index bc3bc77849..6310652f36 100644
--- a/subprojects/gst-plugins-ugly/ext/sidplay/meson.build
+++ b/subprojects/gst-plugins-ugly/ext/sidplay/meson.build
@@ -1,7 +1,7 @@
-sidplay_option = get_option('sidplay').require(gpl_allowed, error_message: '''
-  Plugin sidplay explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
+sidplay_option = get_option('sidplay')
+if sidplay_option.disabled()
+  subdir_done()
+endif
 
 if not add_languages('cpp', native: false, required: sidplay_option)
   subdir_done()
diff --git a/subprojects/gst-plugins-ugly/ext/x264/meson.build b/subprojects/gst-plugins-ugly/ext/x264/meson.build
index 7fe65f88ee..fdbfeebce5 100644
--- a/subprojects/gst-plugins-ugly/ext/x264/meson.build
+++ b/subprojects/gst-plugins-ugly/ext/x264/meson.build
@@ -1,14 +1,9 @@
-x264_opt = get_option('x264').require(gpl_allowed, error_message: '''
-  Plugin x264 explicitly required via options but GPL-licensed plugins disabled via options.
-  Pass option -Dgpl=enabled to Meson to allow GPL-licensed plugins to be built.
-  ''')
-
 x264_sources = [
   'gstx264enc.c',
   'gstencoderbitrateprofilemanager.c',
 ]
 
-x264_dep = dependency('x264', required : x264_opt,
+x264_dep = dependency('x264', required : get_option('x264'),
                       fallback: ['x264', 'libx264_dep'])
 
 if x264_dep.found()
diff --git a/subprojects/gst-plugins-ugly/meson.build b/subprojects/gst-plugins-ugly/meson.build
index 27be125c4f..19c18014d1 100644
--- a/subprojects/gst-plugins-ugly/meson.build
+++ b/subprojects/gst-plugins-ugly/meson.build
@@ -1,6 +1,6 @@
 project('gst-plugins-ugly', 'c',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : [ 'warning_level=1',
                       'buildtype=debugoptimized' ])
 
@@ -277,10 +277,7 @@ if get_option('default_library') == 'shared'
   plugins_pkgconfig_install_dir = disabler()
 endif
 
-gpl_allowed = get_option('gpl').allowed()
-
 python3 = import('python').find_installation()
-
 subdir('gst')
 subdir('ext')
 subdir('tests')
@@ -304,16 +301,17 @@ endif
 
 configure_file(output : 'config.h', configuration : cdata)
 
-plugin_names = []
-foreach plugin: plugins
-  if plugin.name().startswith('gst')
-    plugin_names += [plugin.name().substring(3)]
-  else
-    plugin_names += [plugin.name()]
-  endif
-endforeach
-
-summary({
-    'Plugins': plugin_names,
-      '(A)GPL license allowed': gpl_allowed,
-}, list_sep: ', ')
+if meson.version().version_compare('>= 0.54')
+  plugin_names = []
+  foreach plugin: plugins
+    # FIXME: Use str.subtring() when we can depend on Meson 0.56
+    split = plugin.name().split('gst')
+    if split.length() == 2
+      plugin_names += [split[1]]
+    else
+      warning('Need substring API in meson >= 0.56 to properly parse plugin name: ' + plugin.name())
+      plugin_names += [plugin.name()]
+    endif
+  endforeach
+  summary({'Plugins':plugin_names}, list_sep: ', ')
+endif
diff --git a/subprojects/gst-plugins-ugly/meson_options.txt b/subprojects/gst-plugins-ugly/meson_options.txt
index 6bdcaf2112..5ef3812a75 100644
--- a/subprojects/gst-plugins-ugly/meson_options.txt
+++ b/subprojects/gst-plugins-ugly/meson_options.txt
@@ -9,7 +9,7 @@ option('realmedia', type : 'feature', value : 'auto')
 option('xingmux', type : 'feature', value : 'auto')
 
 # Feature options for plugins that need external deps
-option('a52dec', type : 'feature', value : 'auto', description : 'Dolby Digital (AC-3) audio decoder plugin based on liba52 (GPL - only built if gpl option is also enabled!)')
+option('a52dec', type : 'feature', value : 'auto', description : 'Dolby Digital (AC-3) audio decoder plugin')
 option('amrnb', type : 'feature', value : 'auto', description : 'Adaptive Multi-Rate Narrow-Band audio codec plugin')
 option('amrwbdec', type : 'feature', value : 'auto', description : 'Adaptive Multi-Rate Wide-Band audio decoder plugin')
 option('cdio', type : 'feature', value : 'auto', description : 'CD audio source plugin based on libcdio (GPL - only built if gpl option is also enabled!)')
diff --git a/subprojects/gst-plugins-ugly/tests/check/meson.build b/subprojects/gst-plugins-ugly/tests/check/meson.build
index 0d59258582..312d629f56 100644
--- a/subprojects/gst-plugins-ugly/tests/check/meson.build
+++ b/subprojects/gst-plugins-ugly/tests/check/meson.build
@@ -24,9 +24,9 @@ test_defines = [
 pluginsdirs = []
 if gst_dep.type_name() == 'pkgconfig'
   pbase = dependency('gstreamer-plugins-base-' + api_version, required: true)
-  pluginsdirs = [gst_dep.get_variable('pluginsdir'),
-                 pbase.get_variable('pluginsdir')]
-  gst_plugin_scanner_dir = gst_dep.get_variable('pluginscannerdir')
+  pluginsdirs = [gst_dep.get_pkgconfig_variable('pluginsdir'),
+                 pbase.get_pkgconfig_variable('pluginsdir')]
+  gst_plugin_scanner_dir = gst_dep.get_pkgconfig_variable('pluginscannerdir')
 else
   gst_plugin_scanner_dir = subproject('gstreamer').get_variable('gst_scanner_dir')
 endif
diff --git a/subprojects/gst-python/meson.build b/subprojects/gst-python/meson.build
index acc3502e3d..efb1973818 100644
--- a/subprojects/gst-python/meson.build
+++ b/subprojects/gst-python/meson.build
@@ -1,6 +1,6 @@
 project('gst-python', 'c', 'cpp',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : [ 'warning_level=1',
                       'c_std=gnu99',
                       'buildtype=debugoptimized' ])
diff --git a/subprojects/gst-python/testsuite/meson.build b/subprojects/gst-python/testsuite/meson.build
index 13738a9f36..c2c28acd22 100644
--- a/subprojects/gst-python/testsuite/meson.build
+++ b/subprojects/gst-python/testsuite/meson.build
@@ -22,8 +22,8 @@ runcmd = run_command(python, '-c', '''with open("@0@/mesonconfig.py", "w") as f:
 pluginsdirs = []
 if gst_dep.type_name() == 'pkgconfig'
   pbase = dependency('gstreamer-plugins-base-' + api_version, required : false)
-  pluginsdirs = [gst_dep.get_variable('pluginsdir'),
-                 pbase.get_variable('pluginsdir')]
+  pluginsdirs = [gst_dep.get_pkgconfig_variable('pluginsdir'),
+                 pbase.get_pkgconfig_variable('pluginsdir')]
 endif
 
 pypluginsdir = [join_paths (meson.project_build_root(), 'plugin'), meson.current_source_dir()]
diff --git a/subprojects/gst-rtsp-server/docs/meson.build b/subprojects/gst-rtsp-server/docs/meson.build
index fa649cf077..39d8ec634f 100644
--- a/subprojects/gst-rtsp-server/docs/meson.build
+++ b/subprojects/gst-rtsp-server/docs/meson.build
@@ -33,7 +33,7 @@ if gst_dep.type_name() == 'internal'
     plugins_cache_generator = gst_proj.get_variable('plugins_cache_generator')
 else
     required_hotdoc_extensions += ['gst-extension']
-    plugins_cache_generator = find_program(join_paths(gst_dep.get_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
+    plugins_cache_generator = find_program(join_paths(gst_dep.get_pkgconfig_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
         required: false)
 endif
 
diff --git a/subprojects/gst-rtsp-server/meson.build b/subprojects/gst-rtsp-server/meson.build
index 35953af72c..a529fa1eaf 100644
--- a/subprojects/gst-rtsp-server/meson.build
+++ b/subprojects/gst-rtsp-server/meson.build
@@ -1,6 +1,6 @@
 project('gst-rtsp-server', 'c',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : ['warning_level=1', 'buildtype=debugoptimized'])
 
 gst_version = meson.project_version()
diff --git a/subprojects/gst-rtsp-server/tests/check/meson.build b/subprojects/gst-rtsp-server/tests/check/meson.build
index 229af32f81..07d3532d49 100644
--- a/subprojects/gst-rtsp-server/tests/check/meson.build
+++ b/subprojects/gst-rtsp-server/tests/check/meson.build
@@ -3,11 +3,11 @@ if gst_dep.type_name() == 'pkgconfig'
   pbase = dependency('gstreamer-plugins-base-' + api_version, required: true)
   pbad = dependency('gstreamer-plugins-bad-' + api_version, required: true)
 
-  pluginsdirs = [gst_dep.get_variable('pluginsdir'),
-                 pbase.get_variable('pluginsdir'),
-                 pbad.get_variable('pluginsdir')]
+  pluginsdirs = [gst_dep.get_pkgconfig_variable('pluginsdir'),
+                 pbase.get_pkgconfig_variable('pluginsdir'),
+                 pbad.get_pkgconfig_variable('pluginsdir')]
 
-  gst_plugin_scanner_dir = gst_dep.get_variable('pluginscannerdir')
+  gst_plugin_scanner_dir = gst_dep.get_pkgconfig_variable('pluginscannerdir')
 else
   gst_plugin_scanner_dir = subproject('gstreamer').get_variable('gst_scanner_dir')
 endif
diff --git a/subprojects/gstreamer-sharp/meson.build b/subprojects/gstreamer-sharp/meson.build
index 9fbd996104..4637fe6cf9 100644
--- a/subprojects/gstreamer-sharp/meson.build
+++ b/subprojects/gstreamer-sharp/meson.build
@@ -1,5 +1,5 @@
 project('gstreamer-sharp', ['cs', 'c'], version: '1.20.0',
-    meson_version : '>= 0.59', license: 'LGPL')
+    meson_version : '>= 0.56', license: 'LGPL')
 
 if host_machine.system() == 'osx'
   lib_prefix=''
@@ -98,7 +98,7 @@ i = 0
 testsenv_ld_library_path = []
 foreach dep: gst_deps + [ges_dep]
     if dep.type_name() == 'pkgconfig'
-        testsenv_ld_library_path += [dep.get_variable('libdir')]
+        testsenv_ld_library_path += [dep.get_pkgconfig_variable('libdir')]
     else
         depdef = gst_deps_defs[i][1]
         libname = gst_deps_defs[i].get(2, '')
diff --git a/subprojects/gstreamer-vaapi/docs/meson.build b/subprojects/gstreamer-vaapi/docs/meson.build
index cbff75cba3..7029966181 100644
--- a/subprojects/gstreamer-vaapi/docs/meson.build
+++ b/subprojects/gstreamer-vaapi/docs/meson.build
@@ -14,7 +14,7 @@ if gst_dep.type_name() == 'internal'
     gst_proj = subproject('gstreamer')
     plugins_cache_generator = gst_proj.get_variable('plugins_cache_generator')
 else
-    plugins_cache_generator = find_program(join_paths(gst_dep.get_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
+    plugins_cache_generator = find_program(join_paths(gst_dep.get_pkgconfig_variable('libexecdir'), 'gstreamer-' + api_version, 'gst-plugins-doc-cache-generator'),
         required: false)
 endif
 
diff --git a/subprojects/gstreamer-vaapi/gst-libs/gst/vaapi/meson.build b/subprojects/gstreamer-vaapi/gst-libs/gst/vaapi/meson.build
index 2e15063261..d4353a4361 100644
--- a/subprojects/gstreamer-vaapi/gst-libs/gst/vaapi/meson.build
+++ b/subprojects/gstreamer-vaapi/gst-libs/gst/vaapi/meson.build
@@ -171,7 +171,7 @@ endif
 
 if USE_WAYLAND
   # The XDG shell interface needs to be generated first
-  wayland_protocols_basedir = wayland_protocols_dep.get_variable('pkgdatadir')
+  wayland_protocols_basedir = wayland_protocols_dep.get_pkgconfig_variable('pkgdatadir')
   xdg_shell_xml_spec = join_paths(wayland_protocols_basedir, 'stable', 'xdg-shell', 'xdg-shell.xml')
   xdg_shell_header = custom_target('vaapi-xdg-shell-client-header',
       command: [ wayland_scanner_bin, 'client-header', '@INPUT@', '@OUTPUT@' ],
diff --git a/subprojects/gstreamer-vaapi/meson.build b/subprojects/gstreamer-vaapi/meson.build
index 2141fe0318..b61989064b 100644
--- a/subprojects/gstreamer-vaapi/meson.build
+++ b/subprojects/gstreamer-vaapi/meson.build
@@ -1,6 +1,6 @@
 project('gstreamer-vaapi', 'c',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : [ 'warning_level=1',
                       'buildtype=debugoptimized' ])
 
@@ -157,7 +157,7 @@ if gstgl_dep.found()
   endif
 endif
 
-driverdir = libva_dep.get_variable('driverdir')
+driverdir = libva_dep.get_pkgconfig_variable('driverdir')
 if driverdir == ''
   driverdir = join_paths(get_option('prefix'), get_option('libdir'), 'dri')
 endif
diff --git a/subprojects/gstreamer-vaapi/tests/check/meson.build b/subprojects/gstreamer-vaapi/tests/check/meson.build
index 31fe0d98a8..11049ab0cb 100644
--- a/subprojects/gstreamer-vaapi/tests/check/meson.build
+++ b/subprojects/gstreamer-vaapi/tests/check/meson.build
@@ -17,7 +17,7 @@ test_defines = [
 
 pluginsdirs = []
 if gst_dep.type_name() == 'pkgconfig'
-  pluginsdirs = [gst_dep.get_variable('pluginsdir')]
+  pluginsdirs = [gst_dep.get_pkgconfig_variable('pluginsdir')]
 endif
 
 foreach t : tests
diff --git a/subprojects/gstreamer/meson.build b/subprojects/gstreamer/meson.build
index bc0633aba2..4fa77b59d7 100644
--- a/subprojects/gstreamer/meson.build
+++ b/subprojects/gstreamer/meson.build
@@ -1,6 +1,6 @@
 project('gstreamer', 'c',
   version : '1.20.0',
-  meson_version : '>= 0.59',
+  meson_version : '>= 0.56',
   default_options : [ 'warning_level=1',
                       'buildtype=debugoptimized' ])
 
@@ -539,7 +539,7 @@ bashcomp_found = false
 if bashcomp_dep.found()
   bashcomp_found = true
   bashcomp_dir_override = bashcomp_dep.version().version_compare('>= 2.10') ? ['datadir', datadir] : ['prefix', prefix]
-  bash_completions_dir = bashcomp_dep.get_variable('completionsdir', pkgconfig_define:  bashcomp_dir_override)
+  bash_completions_dir = bashcomp_dep.get_pkgconfig_variable('completionsdir', define_variable: bashcomp_dir_override)
   if bash_completions_dir == ''
     msg = 'Found bash-completion but the .pc file did not set \'completionsdir\'.'
     if bashcomp_option.enabled()
@@ -550,7 +550,7 @@ if bashcomp_dep.found()
     bashcomp_found = false
   endif
 
-  bash_helpers_dir = bashcomp_dep.get_variable('helpersdir', pkgconfig_define:  bashcomp_dir_override)
+  bash_helpers_dir = bashcomp_dep.get_pkgconfig_variable('helpersdir', define_variable: bashcomp_dir_override)
   if bash_helpers_dir == ''
     msg = 'Found bash-completion, but the .pc file did not set \'helpersdir\'.'
     if bashcomp_option.enabled()
